# Default values for flight-collector
replicaCount:
  api: 3
  dashboard: 2

image:
  api:
    repository: flight-collector-api
    pullPolicy: IfNotPresent
    tag: "latest"
  dashboard:
    repository: flight-collector-dashboard
    pullPolicy: IfNotPresent
    tag: "latest"
  collector:
    repository: flight-collector
    pullPolicy: IfNotPresent
    tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

service:
  api:
    type: ClusterIP
    port: 3001
    metricsPort: 9090
  dashboard:
    type: ClusterIP
    port: 3000

ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
  hosts:
    - host: api.flightdata.example.com
      paths:
        - path: /
          pathType: Prefix
          service: api
    - host: dashboard.flightdata.example.com
      paths:
        - path: /
          pathType: Prefix
          service: dashboard
  tls:
    - secretName: flight-data-tls
      hosts:
        - api.flightdata.example.com
        - dashboard.flightdata.example.com

resources:
  api:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  dashboard:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  collector:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi

autoscaling:
  api:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  dashboard:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - flight-api
        topologyKey: kubernetes.io/hostname

# Storage
persistence:
  enabled: true
  storageClass: "standard"
  accessMode: ReadWriteOnce
  size: 10Gi
  # existingClaim: ""

# Collector CronJob
collector:
  enabled: true
  schedule: "0 */1 * * *"  # Every hour
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1

# Environment Variables
env:
  NODE_ENV: production
  DATABASE_TYPE: postgresql
  LOG_LEVEL: info
  ENABLE_METRICS: true
  ENABLE_REDIS: true

# Secrets (should be provided separately)
secrets:
  jwt_secret: ""
  api_key: ""
  db_password: ""
  redis_password: ""

# Redis subchart
redis:
  enabled: true
  auth:
    enabled: true
    password: "changeme"
  master:
    persistence:
      enabled: true
      size: 8Gi

# PostgreSQL subchart
postgresql:
  enabled: true
  auth:
    database: flightdata
    username: flightuser
    password: "changeme"
    postgresPassword: "changeme"
  primary:
    persistence:
      enabled: true
      size: 20Gi

# Prometheus subchart
prometheus:
  enabled: true
  alertmanager:
    enabled: true
  pushgateway:
    enabled: false
  nodeExporter:
    enabled: true
  serverFiles:
    prometheus.yml:
      scrape_configs:
        - job_name: flight-api
          static_configs:
            - targets:
              - api-service:9090

# Grafana subchart
grafana:
  enabled: true
  adminUser: admin
  adminPassword: "changeme"
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus-server
        access: proxy
        isDefault: true
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        options:
          path: /var/lib/grafana/dashboards/default
  dashboards:
    default:
      flight-dashboard:
        url: https://raw.githubusercontent.com/czhaoca/airport-flight-data-collector/main/monitoring/grafana/dashboards/flight-collector-dashboard.json

# Health checks
healthcheck:
  liveness:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readiness:
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Network Policies
networkPolicy:
  enabled: true
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: flight-data
    - podSelector:
        matchLabels:
          app: flight-api
  egress:
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  # maxUnavailable: 1

# Monitoring
monitoring:
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s