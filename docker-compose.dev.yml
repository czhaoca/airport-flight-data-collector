version: '3.8'

services:
  # Development API Server with hot reload
  api-dev:
    build:
      context: .
      target: base
    container_name: flight-collector-api-dev
    working_dir: /app
    command: npm run dev
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_TYPE=local
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-secret-change-in-production
      - API_KEY=dev-api-key
      - DEBUG=true
    volumes:
      - ./src:/app/src
      - ./api:/app/api
      - ./lib:/app/lib
      - ./config:/app/config
      - ./analytics:/app/analytics
      - ./data:/app/data
      - ./logs:/app/logs
      - ./package.json:/app/package.json
      - /app/node_modules
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Development Dashboard with hot reload
  dashboard-dev:
    build:
      context: .
      target: base
    container_name: flight-collector-dashboard-dev
    working_dir: /app/dashboard
    command: npm run dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001/api/v2
      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
      - NEXT_PUBLIC_DEBUG=true
    volumes:
      - ./dashboard:/app/dashboard
      - /app/dashboard/node_modules
      - /app/dashboard/.next
    depends_on:
      - api-dev
    restart: unless-stopped

  # PostgreSQL for development
  postgres:
    image: postgres:16-alpine
    container_name: flight-collector-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=flightdata
      - POSTGRES_PASSWORD=flightdata123
      - POSTGRES_DB=airport_flights
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flightdata"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: flight-collector-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: flight-collector-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: flight-collector-grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: flight-collector-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    restart: unless-stopped

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: flight-collector-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: