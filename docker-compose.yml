version: '3.8'

services:
  # API Server
  api:
    build:
      context: .
      target: api
    container_name: flight-collector-api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_TYPE=${DATABASE_TYPE:-local}
      - CLOUDFLARE_ACCOUNT_ID=${CLOUDFLARE_ACCOUNT_ID}
      - CLOUDFLARE_DATABASE_ID=${CLOUDFLARE_DATABASE_ID}
      - CLOUDFLARE_D1_TOKEN=${CLOUDFLARE_D1_TOKEN}
      - OCI_TENANCY_OCID=${OCI_TENANCY_OCID}
      - OCI_USER_OCID=${OCI_USER_OCID}
      - OCI_FINGERPRINT=${OCI_FINGERPRINT}
      - OCI_PRIVATE_KEY=${OCI_PRIVATE_KEY}
      - OCI_REGION=${OCI_REGION}
      - OCI_COMPARTMENT_ID=${OCI_COMPARTMENT_ID}
      - OCI_DB_USER=${OCI_DB_USER}
      - OCI_DB_PASSWORD=${OCI_DB_PASSWORD}
      - OCI_DB_CONNECTION_STRING=${OCI_DB_CONNECTION_STRING}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Dashboard
  dashboard:
    build:
      context: .
      target: dashboard
    container_name: flight-collector-dashboard
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://api:3001/api/v1
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Data Collector (runs on schedule)
  collector:
    build:
      context: .
      target: collector
    container_name: flight-collector
    environment:
      - NODE_ENV=production
      - DATABASE_TYPE=${DATABASE_TYPE:-local}
      - CLOUDFLARE_ACCOUNT_ID=${CLOUDFLARE_ACCOUNT_ID}
      - CLOUDFLARE_DATABASE_ID=${CLOUDFLARE_DATABASE_ID}
      - CLOUDFLARE_D1_TOKEN=${CLOUDFLARE_D1_TOKEN}
      - OCI_TENANCY_OCID=${OCI_TENANCY_OCID}
      - OCI_USER_OCID=${OCI_USER_OCID}
      - OCI_FINGERPRINT=${OCI_FINGERPRINT}
      - OCI_PRIVATE_KEY=${OCI_PRIVATE_KEY}
      - OCI_REGION=${OCI_REGION}
      - OCI_COMPARTMENT_ID=${OCI_COMPARTMENT_ID}
      - OCI_DB_USER=${OCI_DB_USER}
      - OCI_DB_PASSWORD=${OCI_DB_PASSWORD}
      - OCI_DB_CONNECTION_STRING=${OCI_DB_CONNECTION_STRING}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    # Run every hour
    command: sh -c "while true; do node src/collect_all.js; sleep 3600; done"

  # Redis for API rate limiting and caching
  redis:
    image: redis:7-alpine
    container_name: flight-collector-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: flight-collector-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    depends_on:
      - api

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: flight-collector-grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  redis_data:
  prometheus_data:
  grafana_data: