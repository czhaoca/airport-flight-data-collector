# Airport Flight Data Collector - Environment Configuration Template
# Copy this file to .env and fill in your values

# ====================
# GENERAL CONFIGURATION
# ====================

# Database provider selection: local, oci, or cloudflare
DB_PROVIDER=local

# Environment: development or production
# This affects table naming (dev_ vs prod_ prefix)
NODE_ENV=development

# Table prefix for this repository/project
# Used to avoid conflicts when multiple projects share the same database
# Example: airport_flight_data, weather_collector, etc.
DB_TABLE_PREFIX=airport_flight_data

# Retry configuration for database operations
DB_RETRY_ATTEMPTS=3
DB_RETRY_DELAY=1000

# ====================
# LOCAL PROVIDER (File System)
# ====================

# Directory where JSON files will be stored
LOCAL_DATA_DIR=./data

# Pretty print JSON files (true/false)
LOCAL_PRETTY_PRINT=true

# ====================
# ORACLE CLOUD INFRASTRUCTURE (OCI)
# ====================

# Required OCI configuration
OCI_USER=
OCI_PASSWORD=
OCI_CONNECTION_STRING=

# Optional OCI configuration
# Path to Oracle Wallet for secure connections
OCI_WALLET_LOCATION=
OCI_WALLET_PASSWORD=

# Connection pool settings
OCI_POOL_MIN=1
OCI_POOL_MAX=4
OCI_POOL_INCREMENT=1
OCI_POOL_TIMEOUT=60

# Override environment and prefix specifically for OCI
# Leave empty to use global NODE_ENV and DB_TABLE_PREFIX
OCI_ENVIRONMENT=
OCI_TABLE_PREFIX=

# ====================
# CLOUDFLARE D1
# ====================

# Required Cloudflare configuration
# Get these from your Cloudflare dashboard
CF_ACCOUNT_ID=
CF_DATABASE_ID=
CF_API_TOKEN=

# Optional Worker URL for enhanced performance
# Deploy a Worker using the provided template in workers/
CF_WORKER_URL=

# Override environment and prefix specifically for Cloudflare
# Leave empty to use global NODE_ENV and DB_TABLE_PREFIX
CF_ENVIRONMENT=
CF_TABLE_PREFIX=

# ====================
# AIRPORT DATA COLLECTION
# ====================

# GitHub token for committing data (optional)
# Required only if you want to automatically commit collected data
GITHUB_TOKEN=

# Collection schedule (used by GitHub Actions)
# Examples: "0 */6 * * *" (every 6 hours), "0 0 * * *" (daily)
COLLECTION_SCHEDULE="0 */6 * * *"

# ====================
# NOTES
# ====================

# Table Naming Convention:
# Tables will be named as: {tablePrefix}_{environment}_{tableName}
# 
# Examples with DB_TABLE_PREFIX=airport_flight_data and NODE_ENV=production:
# - airport_flight_data_prod_flights
# - airport_flight_data_prod_flight_status_history
#
# For development environment:
# - airport_flight_data_dev_flights
# - airport_flight_data_dev_flight_status_history

# Multi-Repository Setup:
# When deploying multiple repositories to the same database,
# use different DB_TABLE_PREFIX values for each repository:
# - Repository 1: DB_TABLE_PREFIX=airport_flights
# - Repository 2: DB_TABLE_PREFIX=weather_data
# - Repository 3: DB_TABLE_PREFIX=airline_stats

# Security Notes:
# - Never commit this file with real credentials
# - Use GitHub Secrets for production deployments
# - Rotate API tokens regularly
# - Use strong passwords for database accounts

# Getting Started:
# 1. Copy this file: cp .env.template .env
# 2. Fill in your database credentials
# 3. Choose your provider (local, oci, or cloudflare)
# 4. Set appropriate environment (development or production)
# 5. Run the application: npm run collect